name: Todo App - Claude並列開発

on:
  workflow_dispatch:
    inputs:
      development_target:
        description: "開発対象"
        required: true
        default: "both"
        type: choice
        options:
          - both
          - backend
          - frontend
      task_description:
        description: "開発タスクの説明"
        required: true
        default: "Todo基本機能の実装"

jobs:
  backend-development:
    if: ${{ github.event.inputs.development_target == 'backend' || github.event.inputs.development_target == 'both' }}
    strategy:
      matrix:
        agent_id: [backend-agent-a, backend-agent-b]
    runs-on: ubuntu-latest
    name: バックエンド開発 (${{ matrix.agent_id }})
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Node.js環境をセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Claude CLI をインストール
        run: npm install -g @anthropic-ai/claude-code

      - name: バックエンド実装を生成
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "▶ バックエンド実装を生成中 (Agent: ${{ matrix.agent_id }})"

          PROMPT="Todo アプリのバックエンドAPIを Node.js + Express で実装してください。

          タスク: ${{ github.event.inputs.task_description }}

          要件:
          - Express.js を使用
          - SQLite データベース
          - CRUD操作 (GET /todos, POST /todos, PUT /todos/:id, DELETE /todos/:id)
          - 適切なエラーハンドリング
          - CORS対応

          出力: app.js ファイルとして完全な実装を生成"

          claude -p "$PROMPT" > backend_implementation_${{ matrix.agent_id }}.js || echo "Claude 実行に失敗しました"

      - name: 生成されたバックエンドコードを確認
        run: |
          echo "=== 生成されたバックエンドコード (${{ matrix.agent_id }}) ==="
          cat backend_implementation_${{ matrix.agent_id }}.js

      - name: 実装をプロジェクト構造に配置
        run: |
          mkdir -p todo-app/backend-${{ matrix.agent_id }}/src
          cp backend_implementation_${{ matrix.agent_id }}.js todo-app/backend-${{ matrix.agent_id }}/src/app.js
          cp todo-app/backend/package.json todo-app/backend-${{ matrix.agent_id }}/

      - name: 依存関係をインストール
        run: |
          cd todo-app/backend-${{ matrix.agent_id }}
          npm install

      - name: 構文チェック
        run: |
          cd todo-app/backend-${{ matrix.agent_id }}
          node -c src/app.js > test_result.txt 2>&1 || echo "構文エラーが発生しました" >> test_result.txt
          cat test_result.txt

      - name: バックエンドアーティファクトをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.agent_id }}-results
          path: |
            todo-app/backend-${{ matrix.agent_id }}/src/app.js
            todo-app/backend-${{ matrix.agent_id }}/test_result.txt

  frontend-development:
    if: ${{ github.event.inputs.development_target == 'frontend' || github.event.inputs.development_target == 'both' }}
    strategy:
      matrix:
        agent_id: [frontend-agent-a, frontend-agent-b]
    runs-on: ubuntu-latest
    name: フロントエンド開発 (${{ matrix.agent_id }})
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Node.js環境をセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Claude CLI をインストール
        run: npm install -g @anthropic-ai/claude-code

      - name: フロントエンド実装を生成
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "▶ フロントエンド実装を生成中 (Agent: ${{ matrix.agent_id }})"

          PROMPT="Todo アプリのフロントエンドを React で実装してください。

          タスク: ${{ github.event.inputs.task_description }}

          要件:
          - React + JavaScript
          - 関数コンポーネント + Hooks
          - Todo一覧表示、追加、編集、削除機能
          - レスポンシブデザイン
          - 適切なエラーハンドリング

          出力: App.js ファイルとして完全な実装を生成"

          claude -p "$PROMPT" > frontend_implementation_${{ matrix.agent_id }}.js || echo "Claude 実行に失敗しました"

      - name: 生成されたフロントエンドコードを確認
        run: |
          echo "=== 生成されたフロントエンドコード (${{ matrix.agent_id }}) ==="
          cat frontend_implementation_${{ matrix.agent_id }}.js

      - name: 実装をプロジェクト構造に配置
        run: |
          mkdir -p todo-app/frontend-${{ matrix.agent_id }}/src
          cp frontend_implementation_${{ matrix.agent_id }}.js todo-app/frontend-${{ matrix.agent_id }}/src/App.js
          cp todo-app/frontend/package.json todo-app/frontend-${{ matrix.agent_id }}/

      - name: 依存関係をインストール
        run: |
          cd todo-app/frontend-${{ matrix.agent_id }}
          npm install

      - name: 基本的な構文チェック
        run: |
          cd todo-app/frontend-${{ matrix.agent_id }}
          echo "構文チェック実行中..." > test_result.txt
          if grep -q "import\|export\|function\|const" src/App.js; then
            echo "✅ 基本的な構文要素が確認されました" >> test_result.txt
          else
            echo "❌ 基本的な構文要素が見つかりません" >> test_result.txt
          fi
          cat test_result.txt

      - name: フロントエンドアーティファクトをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.agent_id }}-results
          path: |
            todo-app/frontend-${{ matrix.agent_id }}/src/App.js
            todo-app/frontend-${{ matrix.agent_id }}/test_result.txt

  compare-results:
    needs: [backend-development, frontend-development]
    if: always()
    runs-on: ubuntu-latest
    name: 結果比較・統合
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: 全てのアーティファクトをダウンロード
        uses: actions/download-artifact@v4

      - name: 開発結果を比較・分析
        run: |
          echo "=== Todo App 開発結果比較 ===" > integration_report.txt
          echo "生成日時: $(date)" >> integration_report.txt
          echo "開発対象: ${{ github.event.inputs.development_target }}" >> integration_report.txt
          echo "タスク: ${{ github.event.inputs.task_description }}" >> integration_report.txt
          echo "" >> integration_report.txt

          # バックエンド結果分析
          if [ "${{ github.event.inputs.development_target }}" = "backend" ] || [ "${{ github.event.inputs.development_target }}" = "both" ]; then
            echo "## バックエンド開発結果" >> integration_report.txt
            echo "" >> integration_report.txt
            
            for agent in backend-agent-a backend-agent-b; do
              echo "### $agent" >> integration_report.txt
              if [ -f "${agent}-results/test_result.txt" ]; then
                echo "テスト結果:" >> integration_report.txt
                cat "${agent}-results/test_result.txt" >> integration_report.txt
              fi
              echo "" >> integration_report.txt
            done
          fi

          # フロントエンド結果分析
          if [ "${{ github.event.inputs.development_target }}" = "frontend" ] || [ "${{ github.event.inputs.development_target }}" = "both" ]; then
            echo "## フロントエンド開発結果" >> integration_report.txt
            echo "" >> integration_report.txt
            
            for agent in frontend-agent-a frontend-agent-b; do
              echo "### $agent" >> integration_report.txt
              if [ -f "${agent}-results/test_result.txt" ]; then
                echo "テスト結果:" >> integration_report.txt
                cat "${agent}-results/test_result.txt" >> integration_report.txt
              fi
              echo "" >> integration_report.txt
            done
          fi

      - name: 比較レポートを表示
        run: cat integration_report.txt

      - name: 統合レポートをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: integration-report
          path: integration_report.txt

name: Claude Dual Agent Implementation

on:
  push:
  workflow_dispatch:
    inputs:
      task_prompt:
        description: 'Claude に実行させるタスクのプロンプト'
        required: true
        default: 'FizzBuzzをPython関数 fizzbuzz(n: int) -> str で実装してください。仕様：3の倍数はFizz、5の倍数はBuzz、15の倍数はFizzBuzz、それ以外は数字の文字列を返す。'
      programming_language:
        description: 'プログラミング言語'
        required: true
        default: 'python'
        type: choice
        options:
          - python
          - javascript
          - go
          - java
      file_extension:
        description: 'ファイル拡張子'
        required: true
        default: 'py'
      test_command:
        description: 'テスト実行コマンド'
        required: false
        default: 'python -m pytest'

jobs:
  generate-code:
    strategy:
      matrix:
        agent_id: [agent-a, agent-b]
    runs-on: ubuntu-latest
    name: Generate by ${{ matrix.agent_id }}
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Claude CLI をインストール
        run: npm install -g @anthropic-ai/claude-code

      - name: Claude バージョン確認
        run: claude --version

      - name: Claude にコード生成させる（${{ matrix.agent_id }}）
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "▶ Claude に問い合わせます（Agent: ${{ matrix.agent_id }})"
          PROMPT="${{ github.event.inputs.task_prompt || 'FizzBuzzをPython関数 fizzbuzz(n: int) -> str で実装してください。仕様：3の倍数はFizz、5の倍数はBuzz、15の倍数はFizzBuzz、それ以外は数字の文字列を返す。' }}"
          FILE_EXT="${{ github.event.inputs.file_extension || 'py' }}"
          claude -p "$PROMPT" \
          > output_${{ matrix.agent_id }}.$FILE_EXT \
          || echo "Claude 実行に失敗しました"

      - name: Claude 出力確認
        run: |
          FILE_EXT="${{ github.event.inputs.file_extension || 'py' }}"
          cat output_${{ matrix.agent_id }}.$FILE_EXT

      - name: Claude 出力を保存
        run: |
          mkdir -p modules/${{ matrix.agent_id }}
          FILE_EXT="${{ github.event.inputs.file_extension || 'py' }}"
          cat output_${{ matrix.agent_id }}.$FILE_EXT > modules/${{ matrix.agent_id }}/implementation.$FILE_EXT

      - name: Python環境をセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: pytest をインストール
        run: pip install pytest

      - name: テストを実行
        run: |
          FILE_EXT="${{ github.event.inputs.file_extension || 'py' }}"
          TEST_CMD="${{ github.event.inputs.test_command || 'python -m pytest' }}"
          
          # テストファイルを各エージェントのモジュールディレクトリにコピー
          if [ -d "tests" ]; then
            cp -r tests/* modules/${{ matrix.agent_id }}/
          fi
          
          cd modules/${{ matrix.agent_id }}
          
          # テストを実行し、結果を保存
          if [ "$FILE_EXT" = "py" ]; then
            $TEST_CMD -v > test_result.txt 2>&1 || echo "テストが失敗しました"
          else
            echo "プログラミング言語 $FILE_EXT のテストは未実装です" > test_result.txt
          fi

      - name: テスト結果を確認
        run: cat modules/${{ matrix.agent_id }}/test_result.txt

      - name: アーティファクトをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.agent_id }}-results
          path: |
            modules/${{ matrix.agent_id }}/implementation.*
            modules/${{ matrix.agent_id }}/test_result.txt

  compare-results:
    needs: generate-code
    runs-on: ubuntu-latest
    name: 結果比較・評価
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: 全てのアーティファクトをダウンロード
        uses: actions/download-artifact@v4

      - name: 結果を比較
        run: |
          echo "=== エージェント結果比較 ===" > comparison_report.txt
          echo "生成日時: $(date)" >> comparison_report.txt
          echo "" >> comparison_report.txt
          
          # テスト成功したエージェントを特定
          SUCCESSFUL_AGENTS=""
          for agent in agent-a agent-b; do
            echo "--- $agent の結果 ---" >> comparison_report.txt
            if [ -f "${agent}-results/test_result.txt" ]; then
              echo "テスト結果:" >> comparison_report.txt
              cat "${agent}-results/test_result.txt" >> comparison_report.txt
              
              # テスト成功判定
              if grep -q "PASSED" "${agent}-results/test_result.txt" && ! grep -q "FAILED" "${agent}-results/test_result.txt"; then
                SUCCESSFUL_AGENTS="$SUCCESSFUL_AGENTS $agent"
                echo "✅ テスト成功" >> comparison_report.txt
              else
                echo "❌ テスト失敗" >> comparison_report.txt
              fi
            else
              echo "テスト結果: ファイルが見つかりません" >> comparison_report.txt
            fi
            echo "" >> comparison_report.txt
            
            echo "実装コード:" >> comparison_report.txt
            if [ -f "${agent}-results/implementation.py" ]; then
              head -20 "${agent}-results/implementation.py" >> comparison_report.txt
            elif [ -f "${agent}-results/implementation.js" ]; then
              head -20 "${agent}-results/implementation.js" >> comparison_report.txt
            else
              echo "実装ファイルが見つかりません" >> comparison_report.txt
            fi
            echo "" >> comparison_report.txt
          done
          
          # 成功したエージェントを環境変数に保存
          echo "SUCCESSFUL_AGENTS=$SUCCESSFUL_AGENTS" >> $GITHUB_ENV

      - name: 比較結果を表示
        run: cat comparison_report.txt

      - name: 比較レポートをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: comparison-report
          path: comparison_report.txt

  create-pr:
    needs: compare-results
    runs-on: ubuntu-latest
    name: プルリクエスト作成
    if: success()
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 全てのアーティファクトをダウンロード
        uses: actions/download-artifact@v4

      - name: 新しいブランチを作成
        run: |
          BRANCH_NAME="claude-implementation-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: 成功した実装を選択してコミット
        run: |
          # 最も優先度の高い成功実装を選択（agent-aを優先）
          SELECTED_AGENT=""
          for agent in agent-a agent-b; do
            if [ -f "${agent}-results/test_result.txt" ]; then
              if grep -q "PASSED" "${agent}-results/test_result.txt" && ! grep -q "FAILED" "${agent}-results/test_result.txt"; then
                SELECTED_AGENT=$agent
                break
              fi
            fi
          done
          
          if [ -n "$SELECTED_AGENT" ]; then
            echo "選択されたエージェント: $SELECTED_AGENT"
            
            # 実装ファイルをコピー
            if [ -f "${SELECTED_AGENT}-results/implementation.py" ]; then
              cp "${SELECTED_AGENT}-results/implementation.py" ./claude_generated_implementation.py
            elif [ -f "${SELECTED_AGENT}-results/implementation.js" ]; then
              cp "${SELECTED_AGENT}-results/implementation.js" ./claude_generated_implementation.js
            fi
            
            # 比較レポートもコピー
            cp comparison-report/comparison_report.txt ./claude_analysis_report.txt
            
            echo "SELECTED_AGENT=$SELECTED_AGENT" >> $GITHUB_ENV
          else
            echo "テストに成功した実装がありません"
            exit 1
          fi

      - name: Git設定
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Claude Auto-Implementation"

      - name: 変更をコミット
        run: |
          git add claude_generated_implementation.* claude_analysis_report.txt
          git commit -m "Add Claude-generated implementation

          Task: ${{ github.event.inputs.task_prompt || 'FizzBuzz implementation' }}
          Language: ${{ github.event.inputs.programming_language || 'python' }}
          Selected Agent: $SELECTED_AGENT
          
          🤖 Generated with Claude Code via GitHub Actions
          
          Co-Authored-By: Claude <noreply@anthropic.com>"

      - name: ブランチをプッシュ
        run: git push origin $BRANCH_NAME

      - name: プルリクエストを作成
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TASK_SUMMARY="${{ github.event.inputs.task_prompt || 'FizzBuzz implementation' }}"
          LANGUAGE="${{ github.event.inputs.programming_language || 'python' }}"
          
          gh pr create --title "🤖 Claude実装: $TASK_SUMMARY" --body "$(cat <<'EOF'
          ## 📋 実装概要
          
          **タスク**: $TASK_SUMMARY
          **言語**: $LANGUAGE
          **選択エージェント**: $SELECTED_AGENT
          
          ## 🔍 生成された実装
          
          Claude が並列実行で生成した実装のうち、テストに成功した実装を選択しました。
          
          ## 📊 分析レポート
          
          詳細な比較分析は `claude_analysis_report.txt` を参照してください。
          
          ## ✅ レビューポイント
          
          - [ ] 実装がタスク要件を満たしているか確認
          - [ ] コードの品質・可読性をチェック
          - [ ] セキュリティ上の問題がないか確認
          - [ ] 既存コードベースとの整合性を確認
          - [ ] テストケースの妥当性を確認
          
          ## 🔧 次のステップ
          
          1. コードレビューを実施
          2. 必要に応じて修正
          3. 追加テストの実行
          4. マージ判断
          
          ---
          
          🤖 **自動生成**: このPRはGitHub Actions + Claude Code によって自動生成されました
          
          **Co-Authored-By**: Claude <noreply@anthropic.com>
          EOF
          )"

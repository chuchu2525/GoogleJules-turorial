name: Claude Dual Agent Implementation

on:
  push:
  workflow_dispatch:
    inputs:
      task_prompt:
        description: "Claude に実行させるタスクのプロンプト"
        required: true
        default: "FizzBuzzをPython関数 fizzbuzz(n: int) -> str で実装してください。仕様：3の倍数はFizz、5の倍数はBuzz、15の倍数はFizzBuzz、それ以外は数字の文字列を返す。"
      programming_language:
        description: "プログラミング言語"
        required: true
        default: "python"
        type: choice
        options:
          - python
          - javascript
          - go
          - java
      file_extension:
        description: "ファイル拡張子"
        required: true
        default: "py"
      test_command:
        description: "テスト実行コマンド"
        required: false
        default: "python -m pytest"

jobs:
  generate-code:
    strategy:
      matrix:
        agent_id: [agent-a, agent-b]
    runs-on: ubuntu-latest
    name: Generate by ${{ matrix.agent_id }}
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Claude CLI をインストール
        run: npm install -g @anthropic-ai/claude-code

      - name: Claude バージョン確認
        run: claude --version

      - name: Claude にコード生成させる（リトライ機能付き）
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "▶ Claude に問い合わせます（Agent: ${{ matrix.agent_id }})"

          # 基本プロンプト
          BASE_PROMPT="${{ github.event.inputs.task_prompt || 'FizzBuzzをPython関数 fizzbuzz(n: int) -> str で実装してください。仕様：3の倍数はFizz、5の倍数はBuzz、15の倍数はFizzBuzz、それ以外は数字の文字列を返す。' }}"
          FILE_EXT="${{ github.event.inputs.file_extension || 'py' }}"
          LANG="${{ github.event.inputs.programming_language || 'python' }}"

          # テストファイルを読み込み
          if [ -f "tests/test_fizzbuzz.py" ]; then
            TEST_CONTENT=$(cat tests/test_fizzbuzz.py)
          else
            TEST_CONTENT="基本的なテストケースを想定してください"
          fi

          # リトライ設定
          MAX_RETRIES=5
          RETRY_COUNT=0
          SUCCESS=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            echo "=== 実装試行 $((RETRY_COUNT + 1))/$MAX_RETRIES ==="
            
            if [ $RETRY_COUNT -eq 0 ]; then
              # 初回：TDD指向の詳細プロンプト
              ENHANCED_PROMPT="$BASE_PROMPT

              重要: 以下のテストを100%通過するコードを生成してください。

              テストファイル内容:
              $TEST_CONTENT

              要件:
              1. すべてのテストケースを通過すること
              2. エラーハンドリングを含むこと  
              3. 型ヒントを使用すること
              4. docstringを含むこと
              5. エッジケース（0など）も考慮すること

              プログラミング言語: $LANG

              出力形式の重要な指示:
              - 説明文やコメントは一切含めない
              - Markdownコードブロック（\`\`\`）は使用しない
              - 純粋な$LANG コードのみを出力
              - ファイルの先頭から末尾まで実行可能なコードのみ

              出力: 完全な実装ファイル（インポート文やコメントも含む）"
            else
              # リトライ時：前回のエラーを含めて改善を促す
              ENHANCED_PROMPT="前回の実装でテストが失敗しました。以下のエラーを修正してください：

              エラー内容:
              $(cat test_result_${{ matrix.agent_id }}.txt 2>/dev/null || echo "テスト実行エラー")

              元のタスク: $BASE_PROMPT

              テストファイル内容:
              $TEST_CONTENT

              特に以下の点を改善してください：
              - テストケースの要件を正確に満たす
              - エッジケースの処理（0、負の数など）
              - 型の整合性
              - 関数名とシグネチャの正確性
              - インポートエラーの解決

              プログラミング言語: $LANG
              出力: 修正された完全な実装ファイル"
            fi
            
            # Claude実行
            echo "Claude実行中..."
            claude -p "$ENHANCED_PROMPT" > raw_output_${{ matrix.agent_id }}.$FILE_EXT || {
              echo "❌ Claude実行に失敗しました"
              RETRY_COUNT=$((RETRY_COUNT + 1))
              continue
            }
            
            echo "Claude生出力を確認:"
            head -20 raw_output_${{ matrix.agent_id }}.$FILE_EXT
            echo "..."
            
            # Markdownコードブロックからピュアなコードを抽出
            echo "コードを抽出中..."
            if [ "$FILE_EXT" = "py" ]; then
              if grep -q '```python' raw_output_${{ matrix.agent_id }}.$FILE_EXT; then
                sed -n '/```python/,/```/p' raw_output_${{ matrix.agent_id }}.$FILE_EXT | sed '1d;$d' > output_${{ matrix.agent_id }}.$FILE_EXT
              else
                cp raw_output_${{ matrix.agent_id }}.$FILE_EXT output_${{ matrix.agent_id }}.$FILE_EXT
              fi
            else
              # 他の言語の場合
              if grep -q '```' raw_output_${{ matrix.agent_id }}.$FILE_EXT; then
                sed -n '/```/,/```/p' raw_output_${{ matrix.agent_id }}.$FILE_EXT | sed '1d;$d' > output_${{ matrix.agent_id }}.$FILE_EXT
              else
                cp raw_output_${{ matrix.agent_id }}.$FILE_EXT output_${{ matrix.agent_id }}.$FILE_EXT
              fi
            fi
            
            # ファイルサイズチェック
            FILE_SIZE=$(wc -c < output_${{ matrix.agent_id }}.$FILE_EXT)
            echo "抽出されたファイルサイズ: ${FILE_SIZE} bytes"
            
            if [ $FILE_SIZE -lt 50 ]; then
              echo "❌ 生成されたファイルが小さすぎます"
              echo "ファイル内容:"
              cat output_${{ matrix.agent_id }}.$FILE_EXT
              RETRY_COUNT=$((RETRY_COUNT + 1))
              continue
            fi
            
            echo "抽出されたコード:"
            cat output_${{ matrix.agent_id }}.$FILE_EXT
            
            # テスト実行の準備
            echo "テスト実行の準備中..."
            
            # 生成されたファイルを適切な場所にコピー
            cp output_${{ matrix.agent_id }}.$FILE_EXT output_${{ matrix.agent_id }}.py 2>/dev/null || true
            
            # デバッグ情報
            echo "現在のディレクトリ内容:"
            ls -la output_* 2>/dev/null || echo "output_* ファイルが見つかりません"
            echo "生成されたファイルの内容確認:"
            head -10 output_${{ matrix.agent_id }}.py
            
            # テスト実行
            echo "テスト実行中..."
            if [ "$FILE_EXT" = "py" ]; then
              # Pythonの場合 - 改善されたテスト実行
              echo "=== 詳細テスト実行 ===" > test_result_${{ matrix.agent_id }}.txt
              echo "実行時刻: $(date)" >> test_result_${{ matrix.agent_id }}.txt
              echo "" >> test_result_${{ matrix.agent_id }}.txt
              
              # 基本的なインポートテスト（簡潔版）
              echo "=== インポートテスト ===" >> test_result_${{ matrix.agent_id }}.txt
              
              # 単純なインポートテスト
              python -c "import sys; sys.path.insert(0, '.'); import output_${{ matrix.agent_id }}; print('インポート成功'); print('fizzbuzz(15):', output_${{ matrix.agent_id }}.fizzbuzz(15))" >> test_result_${{ matrix.agent_id }}.txt 2>&1 || echo "インポートエラー" >> test_result_${{ matrix.agent_id }}.txt
              
              echo "" >> test_result_${{ matrix.agent_id }}.txt
              echo "=== pytest実行 ===" >> test_result_${{ matrix.agent_id }}.txt
              
              # pytest実行（環境変数でPythonパスを設定）
              PYTHONPATH=. python -m pytest tests/test_fizzbuzz.py -v --tb=short --no-header >> test_result_${{ matrix.agent_id }}.txt 2>&1
              TEST_EXIT_CODE=$?
              
              echo "" >> test_result_${{ matrix.agent_id }}.txt
              echo "=== テスト終了コード: $TEST_EXIT_CODE ===" >> test_result_${{ matrix.agent_id }}.txt
              
            else
              echo "プログラミング言語 $FILE_EXT のテストは未実装です" > test_result_${{ matrix.agent_id }}.txt
              TEST_EXIT_CODE=1
            fi
            
            echo "テスト結果:"
            cat test_result_${{ matrix.agent_id }}.txt
            
            # テスト成功判定（より柔軟な判定）
            SUCCESS_PATTERNS=("PASSED" "passed" "OK" "✓" "All tests passed" "test session starts")
            FAILURE_PATTERNS=("FAILED" "failed" "ERROR" "error" "FAIL" "ImportError" "ModuleNotFoundError")
            
            TEST_SUCCESS=false
            
            # 成功パターンをチェック
            for pattern in "${SUCCESS_PATTERNS[@]}"; do
              if grep -q "$pattern" test_result_${{ matrix.agent_id }}.txt; then
                TEST_SUCCESS=true
                break
              fi
            done
            
            # 失敗パターンをチェック（成功判定を上書き）
            for pattern in "${FAILURE_PATTERNS[@]}"; do
              if grep -q "$pattern" test_result_${{ matrix.agent_id }}.txt; then
                TEST_SUCCESS=false
                break
              fi
            done
            
            # 追加の成功判定：テスト実行が正常終了し、失敗がない場合
            if [ $TEST_EXIT_CODE -eq 0 ] && ! grep -q "FAILED\|failed\|ERROR\|error" test_result_${{ matrix.agent_id }}.txt; then
              TEST_SUCCESS=true
            fi
            
            if [ "$TEST_SUCCESS" = true ]; then
              echo "✅ テスト成功！実装を採用します"
              SUCCESS=true
              
              # 成功した実装を最終ファイルとして保存
              cp output_${{ matrix.agent_id }}.$FILE_EXT final_implementation_${{ matrix.agent_id }}.$FILE_EXT
              
              # 成功メトリクスを記録
              echo "SUCCESS_RETRY_COUNT=$RETRY_COUNT" >> $GITHUB_ENV
              echo "FINAL_TEST_RESULT=PASSED" >> $GITHUB_ENV
              
            else
              echo "❌ テスト失敗。リトライします..."
              RETRY_COUNT=$((RETRY_COUNT + 1))
              
              # デバッグ情報を追加
              echo "デバッグ情報:"
              echo "- テスト終了コード: $TEST_EXIT_CODE"
              echo "- 生成ファイルサイズ: $(wc -l < output_${{ matrix.agent_id }}.$FILE_EXT) 行"
              echo "- テスト結果ファイルサイズ: $(wc -l < test_result_${{ matrix.agent_id }}.txt) 行"
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "❌ $MAX_RETRIES 回の試行後もテストに成功しませんでした"
            echo "最後のエラー:"
            cat test_result_${{ matrix.agent_id }}.txt
            
            # 失敗メトリクスを記録
            echo "SUCCESS_RETRY_COUNT=$MAX_RETRIES" >> $GITHUB_ENV
            echo "FINAL_TEST_RESULT=FAILED" >> $GITHUB_ENV
            
            # 失敗時も出力ファイルは保持（デバッグ用）
            cp output_${{ matrix.agent_id }}.$FILE_EXT final_implementation_${{ matrix.agent_id }}.$FILE_EXT
          fi

      - name: Claude 出力確認
        run: |
          FILE_EXT="${{ github.event.inputs.file_extension || 'py' }}"
          cat output_${{ matrix.agent_id }}.$FILE_EXT

      - name: Claude 出力を保存
        run: |
          mkdir -p modules/${{ matrix.agent_id }}
          FILE_EXT="${{ github.event.inputs.file_extension || 'py' }}"
          cat output_${{ matrix.agent_id }}.$FILE_EXT > modules/${{ matrix.agent_id }}/implementation.$FILE_EXT

      - name: Python環境をセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: pytest をインストール
        run: pip install pytest

      - name: テストを実行
        run: |
          FILE_EXT="${{ github.event.inputs.file_extension || 'py' }}"
          TEST_CMD="${{ github.event.inputs.test_command || 'python -m pytest' }}"

          # テストファイルを各エージェントのモジュールディレクトリにコピー
          if [ -d "tests" ]; then
            cp -r tests/* modules/${{ matrix.agent_id }}/
          fi

          cd modules/${{ matrix.agent_id }}

          # テストを実行し、結果を保存
          if [ "$FILE_EXT" = "py" ]; then
            $TEST_CMD -v > test_result.txt 2>&1 || echo "テストが失敗しました"
          else
            echo "プログラミング言語 $FILE_EXT のテストは未実装です" > test_result.txt
          fi

      - name: テスト結果を確認
        run: cat modules/${{ matrix.agent_id }}/test_result.txt

      - name: アーティファクトをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.agent_id }}-results
          path: |
            modules/${{ matrix.agent_id }}/implementation.*
            modules/${{ matrix.agent_id }}/test_result.txt

  compare-results:
    needs: generate-code
    runs-on: ubuntu-latest
    name: 結果比較・評価
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: 全てのアーティファクトをダウンロード
        uses: actions/download-artifact@v4

      - name: 結果を比較
        run: |
          echo "=== エージェント結果比較 ===" > comparison_report.txt
          echo "生成日時: $(date)" >> comparison_report.txt
          echo "" >> comparison_report.txt

          # テスト成功したエージェントを特定
          SUCCESSFUL_AGENTS=""
          for agent in agent-a agent-b; do
            echo "--- $agent の結果 ---" >> comparison_report.txt
            if [ -f "${agent}-results/test_result.txt" ]; then
              echo "テスト結果:" >> comparison_report.txt
              cat "${agent}-results/test_result.txt" >> comparison_report.txt
              
              # テスト成功判定
              if grep -q "PASSED" "${agent}-results/test_result.txt" && ! grep -q "FAILED" "${agent}-results/test_result.txt"; then
                SUCCESSFUL_AGENTS="$SUCCESSFUL_AGENTS $agent"
                echo "✅ テスト成功" >> comparison_report.txt
              else
                echo "❌ テスト失敗" >> comparison_report.txt
              fi
            else
              echo "テスト結果: ファイルが見つかりません" >> comparison_report.txt
            fi
            echo "" >> comparison_report.txt
            
            echo "実装コード:" >> comparison_report.txt
            if [ -f "${agent}-results/implementation.py" ]; then
              head -20 "${agent}-results/implementation.py" >> comparison_report.txt
            elif [ -f "${agent}-results/implementation.js" ]; then
              head -20 "${agent}-results/implementation.js" >> comparison_report.txt
            else
              echo "実装ファイルが見つかりません" >> comparison_report.txt
            fi
            echo "" >> comparison_report.txt
          done

          # 成功したエージェントを環境変数に保存
          echo "SUCCESSFUL_AGENTS=$SUCCESSFUL_AGENTS" >> $GITHUB_ENV

      - name: 比較結果を表示
        run: cat comparison_report.txt

      - name: 比較レポートをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: comparison-report
          path: comparison_report.txt

  create-pr:
    needs: compare-results
    runs-on: ubuntu-latest
    name: プルリクエスト作成
    if: success()
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 全てのアーティファクトをダウンロード
        uses: actions/download-artifact@v4

      - name: 新しいブランチを作成
        run: |
          BRANCH_NAME="claude-implementation-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: 成功した実装を選択してコミット
        run: |
          # 最も優先度の高い成功実装を選択（agent-aを優先）
          SELECTED_AGENT=""
          for agent in agent-a agent-b; do
            if [ -f "${agent}-results/test_result.txt" ]; then
              if grep -q "PASSED" "${agent}-results/test_result.txt" && ! grep -q "FAILED" "${agent}-results/test_result.txt"; then
                SELECTED_AGENT=$agent
                break
              fi
            fi
          done

          if [ -n "$SELECTED_AGENT" ]; then
            echo "選択されたエージェント: $SELECTED_AGENT"
            
            # 実装ファイルをコピー
            if [ -f "${SELECTED_AGENT}-results/implementation.py" ]; then
              cp "${SELECTED_AGENT}-results/implementation.py" ./claude_generated_implementation.py
            elif [ -f "${SELECTED_AGENT}-results/implementation.js" ]; then
              cp "${SELECTED_AGENT}-results/implementation.js" ./claude_generated_implementation.js
            fi
            
            # 比較レポートもコピー
            cp comparison-report/comparison_report.txt ./claude_analysis_report.txt
            
            echo "SELECTED_AGENT=$SELECTED_AGENT" >> $GITHUB_ENV
          else
            echo "テストに成功した実装がありません"
            exit 1
          fi

      - name: Git設定
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Claude Auto-Implementation"

      - name: 変更をコミット
        run: |
          git add claude_generated_implementation.* claude_analysis_report.txt
          git commit -m "Add Claude-generated implementation

          Task: ${{ github.event.inputs.task_prompt || 'FizzBuzz implementation' }}
          Language: ${{ github.event.inputs.programming_language || 'python' }}
          Selected Agent: $SELECTED_AGENT

          🤖 Generated with Claude Code via GitHub Actions

          Co-Authored-By: Claude <noreply@anthropic.com>"

      - name: ブランチをプッシュ
        run: git push origin $BRANCH_NAME

      - name: プルリクエストを作成
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TASK_SUMMARY="${{ github.event.inputs.task_prompt || 'FizzBuzz implementation' }}"
          LANGUAGE="${{ github.event.inputs.programming_language || 'python' }}"

          gh pr create --title "🤖 Claude実装: $TASK_SUMMARY" --body "$(cat <<'EOF'
          ## 📋 実装概要

          **タスク**: $TASK_SUMMARY
          **言語**: $LANGUAGE
          **選択エージェント**: $SELECTED_AGENT

          ## 🔍 生成された実装

          Claude が並列実行で生成した実装のうち、テストに成功した実装を選択しました。

          ## 📊 分析レポート

          詳細な比較分析は `claude_analysis_report.txt` を参照してください。

          ## ✅ レビューポイント

          - [ ] 実装がタスク要件を満たしているか確認
          - [ ] コードの品質・可読性をチェック
          - [ ] セキュリティ上の問題がないか確認
          - [ ] 既存コードベースとの整合性を確認
          - [ ] テストケースの妥当性を確認

          ## 🔧 次のステップ

          1. コードレビューを実施
          2. 必要に応じて修正
          3. 追加テストの実行
          4. マージ判断

          ---

          🤖 **自動生成**: このPRはGitHub Actions + Claude Code によって自動生成されました

          **Co-Authored-By**: Claude <noreply@anthropic.com>
          EOF
          )"
